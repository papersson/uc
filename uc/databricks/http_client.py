from typing import Any, Dict, List, Optional

import requests

from uc.utils.scim import SCIMFilter


class BaseHttpClient:
    """
    Base HTTP client for sending requests to Databricks APIs.
    """
    def __init__(self, access_token: str, databricks_instance: str):
        """
        Initializes the client with authorization and instance details.

        :param access_token: Databricks API access token.
        :param databricks_instance: Databricks instance URL.
        """
        self.headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json',
        }
        self.databricks_instance = databricks_instance

    def send_request(self, method: str, endpoint: str, payload: Optional[Dict[str, Any]] = None, params: Optional[Dict[str, str]] = None) -> requests.Response:
        """
        Sends an HTTP request to a specified Databricks API endpoint.

        :param method: HTTP method (e.g., 'GET', 'POST').
        :param endpoint: API endpoint path.
        :param payload: JSON payload for the request body.
        :param params: URL parameters.
        :return: requests.Response object.
        """
        url = f"{self.databricks_instance}{endpoint}"
        return requests.request(method, url, headers=self.headers, json=payload, params=params)

class CatalogClient(BaseHttpClient):
    """
    Client for managing Databricks Unity Catalogs.
    """
    def create_catalog(self, catalog_name: str) -> requests.Response:
        """
        Creates a new catalog.

        :param catalog_name: Name of the catalog to create.
        :return: requests.Response object.
        """
        payload = {"name": catalog_name, "comment": f"Catalog for {catalog_name}, auto-generated."}
        return self.send_request('POST', "/api/2.0/unity-catalog/catalogs", payload)

    def delete_catalog(self, catalog_name: str, force: bool = True) -> requests.Response:
        """
        Deletes a catalog.

        :param catalog_name: Name of the catalog to delete.
        :param force: Whether to force delete the catalog even if it contains schemas.
        :return: requests.Response object.
        """
        params = {'force': 'true'} if force else {}
        return self.send_request('DELETE', f"/api/2.1/unity-catalog/catalogs/{catalog_name}", params=params)
    
    def catalog_exists(self, catalog_name: str) -> bool:
        """
        Checks if a catalog exists.

        :param catalog_name: Name of the catalog to check.
        :return: True if the catalog exists, False otherwise.
        """
        response = self.send_request('GET', f"/api/2.0/unity-catalog/catalogs/{catalog_name}")
        return response.status_code == 200

class SecurityGroupClient(BaseHttpClient):
    """
    Client for managing Databricks account-level security groups.
    """
    def create_security_group(self, group_name: str) -> requests.Response:
        """
        Creates a new security group.

        :param group_name: Name of the security group to create.
        :return: requests.Response object.
        """
        payload = {
            "schemas": ["urn:ietf:params:scim:schemas:core:2.0:Group"],
            "displayName": group_name,
            "externalId": "AutoGenerated"
        }
        return self.send_request('POST', "/api/2.0/account/scim/v2/Groups", payload)

    def delete_security_group(self, group_id: str) -> requests.Response:
        """
        Deletes a security group.

        :param group_id: ID of the security group to delete.
        :return: requests.Response object.
        """
        return self.send_request('DELETE', f"/api/2.0/account/scim/v2/Groups/{group_id}")

    def assign_privileges_to_group(self, securable_type: str, full_name: str, group_name: str, add_privileges: List[str]) -> requests.Response:
        """
        Assigns privileges to a security group.

        :param securable_type: Type of the securable item.
        :param full_name: Full name of the securable item.
        :param group_name: Name of the security group.
        :param add_privileges: List of privileges to add.
        :return: requests.Response object.
        """
        payload = {"changes": [{"principal": group_name, "add": add_privileges, "remove": []}]}
        return self.send_request('PATCH', f"/api/2.1/unity-catalog/permissions/{securable_type}/{full_name}", payload)

    def fetch_groups(self, filters: Optional[List[SCIMFilter]] = None) -> List[dict]:
        """
        Fetches a list of security groups based on filters.

        :param filters: Optional list of filter strings to apply.
        :return: List of dictionaries representing the security groups.
        """
        filter_str = " and ".join(filter.build() for filter in filters) if filters else None
        params = {"filter": filter_str} if filter_str else None
        response = self.send_request('GET', "/api/2.0/account/scim/v2/Groups", params=params)
        return response.json().get('Resources', []) if response.status_code == 200 else []