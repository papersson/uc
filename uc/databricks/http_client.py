import os
import requests
from typing import Any, Dict, List, Optional

from uc.utils.scim import SCIMFilter

class DatabricksHttpService:
    def __init__(self):
        access_token = os.getenv('DATABRICKS_ACCESS_TOKEN')
        databricks_instance = os.getenv('DATABRICKS_INSTANCE_URL')

        self.headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json',
        }
        self.databricks_instance = databricks_instance

    def send_request(self, method: str, endpoint: str, payload: Optional[Dict[str, Any]] = None, params: Optional[Dict[str, str]] = None) -> requests.Response:
        url = f"{self.databricks_instance}{endpoint}"
        return requests.request(method, url, headers=self.headers, json=payload, params=params)
    

class CatalogClient:
    def __init__(self, databricks_http_service: DatabricksHttpService):
        self.service = databricks_http_service

    def create_catalog(self, catalog_name: str) -> requests.Response:
        payload = {"name": catalog_name, "comment": f"Catalog for {catalog_name}, auto-generated."}
        return self.service.send_request('POST', "/api/2.0/unity-catalog/catalogs", payload)

    def delete_catalog(self, catalog_name: str, force: bool = True) -> requests.Response:
        params = {'force': 'true'} if force else {}
        return self.service.send_request('DELETE', f"/api/2.1/unity-catalog/catalogs/{catalog_name}", params=params)
    
    def catalog_exists(self, catalog_name: str) -> bool:
        response = self.service.send_request('GET', f"/api/2.0/unity-catalog/catalogs/{catalog_name}")
        return response.status_code == 200

class SecurityGroupClient:
    def __init__(self, databricks_http_service: DatabricksHttpService):
        self.service = databricks_http_service

    def create_security_group(self, group_name: str) -> requests.Response:
        payload = {
            "schemas": ["urn:ietf:params:scim:schemas:core:2.0:Group"],
            "displayName": group_name,
            "externalId": "AutoGenerated"
        }
        return self.service.send_request('POST', "/api/2.0/account/scim/v2/Groups", payload)

    def delete_security_group(self, group_id: str) -> requests.Response:
        return self.service.send_request('DELETE', f"/api/2.0/account/scim/v2/Groups/{group_id}")

    def assign_privileges_to_group(self, securable_type: str, full_name: str, group_name: str, add_privileges: List[str]) -> requests.Response:
        payload = {"changes": [{"principal": group_name, "add": add_privileges, "remove": []}]}
        return self.service.send_request('PATCH', f"/api/2.1/unity-catalog/permissions/{securable_type}/{full_name}", payload)

    def fetch_groups(self, filters: Optional[List[SCIMFilter]] = None) -> List[dict]:
        filter_str = " and ".join(filter.build() for filter in filters) if filters else None
        params = {"filter": filter_str} if filter_str else None
        response = self.service.send_request('GET', "/api/2.0/account/scim/v2/Groups", params=params)
        return response.json().get('Resources', []) if response.status_code == 200 else []